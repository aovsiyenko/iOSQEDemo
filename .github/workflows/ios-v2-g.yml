name: iOS CI Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-14
    strategy:
      matrix:
        destination: ["platform=iOS Simulator,name=iPhone 14,OS=latest"] # Define destinations in a matrix
        test_type: ["unit", "ui"]  # Run both unit and UI tests in the same job

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Select Xcode Version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app # Pin to a specific Xcode version (adjust as needed)

      - name: Install Dependencies
        run: |
          gem install cocoapods xcpretty
          if [ -f "Podfile" ]; then
            pod install
          fi

      - name: Set Default Scheme
        id: set_scheme
        run: |
          scheme_list=$(xcodebuild -list -json)
          default=$(echo "$scheme_list" | jq -r '.project.schemes[0]')
          echo "::set-output name=scheme::$default"

      - name: Boot Simulator (Important!)
        run: xcrun simctl boot "iPhone 14" # Boot the simulator *before* building

      - name: List available simulators (for debugging)
        run: xcrun simctl list devices

      - name: Build and Test ${{ matrix.test_type }} Tests
        env:
          SCHEME: ${{ steps.set_scheme.outputs.scheme }}
          DESTINATION: ${{ matrix.destination }} # Use the matrix destination
        run: |
          if [[ "${{ matrix.test_type }}" == "unit" ]]; then
            xcodebuild build-for-testing -scheme "$SCHEME" -destination "$DESTINATION"
            xcodebuild test-without-building -scheme "$SCHEME" -destination "$DESTINATION" | xcpretty --test --report junit
          elif [[ "${{ matrix.test_type }}" == "ui" ]]; then
            xcodebuild build-for-testing -scheme "$SCHEME" -destination "$DESTINATION"
            xcodebuild test-without-building -scheme "$SCHEME" -destination "$DESTINATION" | xcpretty --test --report junit
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test_type }}-test-results
          path: test-output/
