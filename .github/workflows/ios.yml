name: iOS CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ðŸš¦ Job 1: Build and Run Unit Tests
  unit-tests:
    name: Build and Run Unit Tests
    runs-on: macos-latest

    steps:
      # âœ… Checkout the Code
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # âœ… Install Dependencies (CocoaPods and xcpretty)
      - name: Install Dependencies
        run: |
          sudo gem install cocoapods xcpretty
          pod install

      # âœ… Auto-detect the Scheme
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      # âœ… Build and Test Unit Tests
      - name: Run Unit Tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          xcodebuild build-for-testing -scheme "$scheme" -destination "platform=$platform,name=$device"
          xcodebuild test-without-building -scheme "$scheme" -destination "platform=$platform,name=$device" | xcpretty --test --report junit

      # âœ… Upload Unit Test Results (v4)
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v4
        with:
          name: UnitTestResults
          path: test-output/

  # ðŸš¦ Job 2: Build and Run UI Tests
  ui-tests:
    name: Build and Run UI Tests
    runs-on: macos-latest
    needs: unit-tests

    steps:
      # âœ… Checkout the Code
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # âœ… Install Dependencies
      - name: Install Dependencies
        run: |
          sudo gem install cocoapods xcpretty
          pod install

      # âœ… Auto-detect the Scheme
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default

      # âœ… Build App for UI Testing
      - name: Build for UI Testing
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          xcodebuild build-for-testing -scheme "$scheme" -destination "platform=$platform,name=$device"

      # âœ… Run UI Tests
      - name: Run UI Tests
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          xcodebuild test-without-building -scheme "$scheme" -destination "platform=iOS Simulator,name=$device" | xcpretty --test --report junit

      # âœ… Upload UI Test Results (v4)
      - name: Upload UI Test Results
        uses: actions/upload-artifact@v4
        with:
          name: UITestResults
          path: test-output/
